---
- name: "Set variables for {{ item.name }}"
  set_fact:
    cert_key: "{{ int_path }}/certs/{{ item.name }}.key.pem"
    cert_pem: "{{ int_path }}/certs/{{ item.name }}.pem"
    cert_cnf: "{{ int_path }}/csr/{{ item.name }}.cnf"
    cert_csr: "{{ int_path }}/csr/{{ item.name }}.csr"

- name: "See if cert {{ item.name }} already exists"
  stat:
    path: "{{ cert_pem }}"
  register: cert_exists

- name: Generate missing certificate
  block:

  - name: "Create certificate config for {{ item.name }}"
    template:
      src: certificate.cnf.j2
      dest: "{{ cert_cnf }}"

  - name: "Create private key for {{ item.name }}"
    shell: |
      openssl genrsa -out {{ cert_key }} 2048
    args:
      chdir: "{{ int_path }}"
      creates: "{{ cert_key }}"

  - name: "Protect private key for {{ item.name }}"
    file:
      path: "{{ cert_key }}"
      mode: 0400

  - name: "Create CSR for {{ item.name }}"
    shell: |
      openssl req \
              -new \
              -sha256 \
              -config {{ cert_cnf }} \
              -key {{ cert_key }} \
              -out {{ cert_csr }}
    args:
      chdir: "{{ int_path }}"
      creates: "{{ cert_csr }}"

  - name: "Clean config for {{ item.name }}"
    file:
      path: "{{ cert_cnf }}"
      state: absent

  - name: "Sign certificate for {{ item.name }}"
    shell: |
      openssl ca \
              -batch \
              -config openssl.cnf \
              -notext \
              -in {{ cert_csr }} \
              -passin pass:{{ pki_int_pass }} \
              -out {{ cert_pem }}
    args:
      chdir: "{{ int_path }}"
      creates: "{{ cert_pem }}"

  - name: "Clean CSR for {{ item.name }}"
    file:
      path: "{{ cert_csr }}"
      state: absent

  when: cert_exists.stat.exists == false

