---
- name: Ensure intermediate structures exist
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
  with_items:
    - "{{ int_path }}/certs"
    - "{{ int_path }}/crl"
    - "{{ int_path }}/csr"
    - "{{ int_path }}/newcerts"
    - "{{ int_path }}/private"

- name: Ensure the intermediate private structure is private
  file: 
    path: "{{ int_path }}/private"
    mode: '0700'

- name: Ensure the index exists
  copy:
    content: ""
    dest: "{{ int_path }}/index.txt"
    force: no

- name: Ensure the index attributes exists and sets unique_subject
  lineinfile:
    dest: "{{ int_path }}/index.txt.attr"
    state: present
    line: "unique_subject = yes"
    create: yes

- name: Ensure the serial file exists and starts at 1000
  copy:
    content: "1000"
    dest: "{{ int_path }}/serial"
    force: no

- name: Ensure the crlnumber file exists and starts at 1000
  copy:
    content: "1000"
    dest: "{{ int_path }}/crlnumber"
    force: no

- name: Check the OpenSSL config exists
  template:
    src: openssl.int.cnf.j2
    dest: "{{ int_path }}/openssl.cnf"

- name: Make sure there is an intermediate key
  shell: |
    openssl genrsa \
    -aes256 \
    -out private/int.key.pem \
    -passout pass:{{ pki_int_pass }} 4096
  args:
    chdir: "{{ int_path }}"
    creates: "{{ int_path }}/private/int.key.pem"
  register: created_new_int_key

- name: Make sure the intermediate key is secure
  file:
    path: "{{ int_path }}/private/int.key.pem"
    mode: "0400"

- name: Delete existing cert if new key
  file:
    path: "{{ int_path }}/certs/int.cert.pem"
    state: absent
  when: created_new_int_key == true

- name: Delete existing chain if new key
  file:
    path: "{{ int_path }}/certs/ca-chain.pem"
    state: absent
  when: created_new_int_key == true

- name: Check if the intermediate certificate exists
  stat:
    path: "{{ int_path }}/certs/int.pem"
  register: int_cert_exists
  tags: certs


# Only create a new certificate if there isn't already one.
- name: Create a CSR for the intermediate certificate
  shell: |
    openssl req \
    -config openssl.cnf \
    -new -sha256 \
    -key private/int.key.pem \
    -passin pass:{{ pki_int_pass }} \
    -out csr/int.csr
  args:
    chdir: "{{ int_path }}"
    creates: "{{ int_path }}/csr/int.csr"
  when: int_cert_exists.stat.exists == false
  register: created_new_int_csr

# We now need to wait for the CSR to be processed and
# turned into a certificate by the Root CA.

- name: Generate certificates
  block:

  - name: Make sure there is a certificate chain
    shell: cat int.pem root.pem > ca-chain.pem
    args:
      chdir: "{{ int_path }}/certs"
      creates: "{{ int_path }}/certs/ca-chain.pem"

  - name: Generate Certificates
    include_tasks: certificate.yml 
    with_items: "{{ pki_certificates }}"
    tags: certs

  - name: Update Intermediate CRL
    shell: |
      openssl ca \
              -config openssl.cnf \
              -gencrl \
              -passin pass:{{ pki_int_pass }} \
              -cert certs/int.pem \
              -out crl/int.crl.pem

      openssl crl \
              -inform PEM \
              -in crl/int.crl.pem \
              -outform DER \
              -out crl/int.crl
    args:
      chdir: "{{ int_path }}"
    tags: certs
  
  when: int_cert_exists.stat.exists == true
